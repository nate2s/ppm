//
// This file is part of Taffy, a mathematical programming language.
// Copyright (C) 2016-2017 Arithmagic, LLC
//
// Taffy is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Taffy is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package org.taffy.core.container

abstract class LineContainer(Container)
{
    (@) mean
    #const
    {
        total = 0

        self each: ^{ <_value>
             total += _value
        }

        return (total / [self size])
    }

    (@) min
    #const
    {
        result = nil

        self each: ^{ <_value>
             if (result == nil
                 or _value < result)
             {
                 result = _value
             }
        }

        return result
    }

    (@) max
    #const
    {
        result = nil

        self each: ^{ <_value>
             if (result == nil
                 or _value > result)
             {
                 result = _value
             }
        }

        return result
    }

    (@) range
    #const
    {
        return ([self max] - [self min])
    }

    (@) variance
    #const
    {
        mean = [self mean]
        variance = 0

        self each: ^{ <_value>
             variance += (_value - mean)^2
        }

        variance /= [self size]
        return variance
    }

    (@) standardDeviation
    #const
    {
        return sqrt([self variance])
    }

    (@) gcd
    #const
    {
        result = 0

        self each: ^{ <_value>
             result = gcd(result, _value)
        }

        return result
    }

    (@) lcm
    #const
    {
        result = 0
        first = true

        self each: ^{ <_value>
             if (first)
             {
                 result = _value
                 first = false
             }
             else
             {
                 result = lcm(result, _value)
             }
        }

        return result
    }
}
